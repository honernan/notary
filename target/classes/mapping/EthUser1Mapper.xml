<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.victor.notary.mapper.EthUser1Mapper" >
  <resultMap id="BaseResultMap" type="com.victor.notary.model.EthUser1" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="userAddress" property="useraddress" jdbcType="VARCHAR" />
    <result column="UserKeyFileJson" property="userkeyfilejson" jdbcType="VARCHAR" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="money" property="money" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, url, userAddress, UserKeyFileJson, flag, money, password
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from eth_user1
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByUserAddress" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from eth_user1
    where userAddress = #{userAddress,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from eth_user1
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.victor.notary.model.EthUser1" >
    insert into eth_user1 (id, url, userAddress, 
      UserKeyFileJson, flag, money, password)
    values (#{id,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR}, #{useraddress,jdbcType=VARCHAR}, 
      #{userkeyfilejson,jdbcType=VARCHAR}, #{flag,jdbcType=INTEGER}), #{money,jdbcType=VARCHAR},
      #{password,jdbcType=VARCHAR}
  </insert>
  <insert id="insertSelective" parameterType="com.victor.notary.model.EthUser1" >
    insert into eth_user1
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="useraddress != null" >
        userAddress,
      </if>
      <if test="userkeyfilejson != null" >
        UserKeyFileJson,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="password != null" >
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="useraddress != null" >
        #{useraddress,jdbcType=VARCHAR},
      </if>
      <if test="userkeyfilejson != null" >
        #{userkeyfilejson,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        #{money,jdbcType=VARCHAR},
    </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.victor.notary.model.EthUser1" >
    update eth_user1
    <set >
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="useraddress != null" >
        userAddress = #{useraddress,jdbcType=VARCHAR},
      </if>
      <if test="userkeyfilejson != null" >
        UserKeyFileJson = #{userkeyfilejson,jdbcType=VARCHAR},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByUserAddr" parameterType="java.lang.String" >
    update eth_user1
    set
      money = #{money,jdbcType=VARCHAR}
    where userAddress = #{userAddress,jdbcType=VARCHAR}
  </update>

  <!--获取所有的user对象-->
  <select id="selectAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from eth_user1
  </select>

</mapper>