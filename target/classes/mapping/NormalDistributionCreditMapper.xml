<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.victor.notary.mapper.NormalDistributionCreditMapper" >
  <resultMap id="BaseResultMap" type="com.victor.notary.model.NormalDistributionCredit" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="begincredit" property="begincredit" jdbcType="REAL" />
    <result column="endcredit" property="endcredit" jdbcType="REAL" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, begincredit, endcredit
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from normal_distribution_credit
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from normal_distribution_credit
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.victor.notary.model.NormalDistributionCredit" >
    insert into normal_distribution_credit (id, begincredit, endcredit
      )
    values (#{id,jdbcType=INTEGER}, #{begincredit,jdbcType=REAL}, #{endcredit,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.victor.notary.model.NormalDistributionCredit" >
    insert into normal_distribution_credit
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="begincredit != null" >
        begincredit,
      </if>
      <if test="endcredit != null" >
        endcredit,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="begincredit != null" >
        #{begincredit,jdbcType=REAL},
      </if>
      <if test="endcredit != null" >
        #{endcredit,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.victor.notary.model.NormalDistributionCredit" >
    update normal_distribution_credit
    <set >
      <if test="begincredit != null" >
        begincredit = #{begincredit,jdbcType=REAL},
      </if>
      <if test="endcredit != null" >
        endcredit = #{endcredit,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.victor.notary.model.NormalDistributionCredit" >
    update normal_distribution_credit
    set begincredit = #{begincredit,jdbcType=REAL},
      endcredit = #{endcredit,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--获取1链信誉值大于1链信誉平均值的几个账户-->
  <select id="selectNotary" resultMap="BaseResultMap">
    select *
    from
      (select *
       from normal_distribution_credit
       where endcredit &gt;= ((select AVG(endcredit)
                               from normal_distribution_credit
                              )-1)
      ) AS b
  </select>
  <!--根据公证人组表的id更新信誉值-->
  <update id="updateEndCreditById" >
    update normal_distribution_credit
    set
      endcredit = #{endcredit,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--获取1链信誉值大于1链信誉平均值的几个账户-->
  <select id="selectFirstNotary" resultMap="BaseResultMap">
    select * from normal_distribution_credit where endcredit in (
      select MAX(endcredit) from normal_distribution_credit
    )
  </select>
  <!--获取1链信誉值大于1链信誉平均值的几个账户-->
  <select id="selectHighNotary" resultMap="BaseResultMap">
    select *
    from
      (select *
       from normal_distribution_credit
       where endcredit &gt;= ((select AVG(endcredit)
                               from normal_distribution_credit
                               where endcredit > 0
                              ))
      ) AS b
  </select>

  <!--获取1链信誉值小于1链信誉平均值的几个账户-->
  <select id="selectLowNotary" resultMap="BaseResultMap">
    select *
    from
      (select *
       from normal_distribution_credit
       where endcredit &lt;= ((select AVG(endcredit)
                               from normal_distribution_credit
                               where endcredit > 0
       )) and endcredit > 0
      ) AS b
  </select>

</mapper>