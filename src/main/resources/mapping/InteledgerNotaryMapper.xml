<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.victor.notary.mapper.InteledgerNotaryMapper" >
  <resultMap id="BaseResultMap" type="com.victor.notary.model.InteledgerNotary" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="ethChain1" property="ethchain1" jdbcType="VARCHAR" />
    <result column="userAddress1" property="useraddress1" jdbcType="VARCHAR" />
    <result column="UserKeyFileJson1" property="userkeyfilejson1" jdbcType="VARCHAR" />
    <result column="money1" property="money1" jdbcType="VARCHAR" />
    <result column="ethChain2" property="ethchain2" jdbcType="VARCHAR" />
    <result column="UserAddress2" property="useraddress2" jdbcType="VARCHAR" />
    <result column="UserKeyFileJson2" property="userkeyfilejson2" jdbcType="VARCHAR" />
    <result column="money2" property="money2" jdbcType="VARCHAR" />
    <result column="fc" property="fc" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, ethChain1, userAddress1, UserKeyFileJson1, money1, ethChain2, UserAddress2, UserKeyFileJson2, 
    money2, fc
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from inteledger_notary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from inteledger_notary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.victor.notary.model.InteledgerNotary" >
    insert into inteledger_notary (id, ethChain1, userAddress1, 
      UserKeyFileJson1, money1, ethChain2, 
      UserAddress2, UserKeyFileJson2, money2, 
      fc)
    values (#{id,jdbcType=INTEGER}, #{ethchain1,jdbcType=VARCHAR}, #{useraddress1,jdbcType=VARCHAR}, 
      #{userkeyfilejson1,jdbcType=VARCHAR}, #{money1,jdbcType=VARCHAR}, #{ethchain2,jdbcType=VARCHAR}, 
      #{useraddress2,jdbcType=VARCHAR}, #{userkeyfilejson2,jdbcType=VARCHAR}, #{money2,jdbcType=VARCHAR}, 
      #{fc,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.victor.notary.model.InteledgerNotary" >
    insert into inteledger_notary
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="ethchain1 != null" >
        ethChain1,
      </if>
      <if test="useraddress1 != null" >
        userAddress1,
      </if>
      <if test="userkeyfilejson1 != null" >
        UserKeyFileJson1,
      </if>
      <if test="money1 != null" >
        money1,
      </if>
      <if test="ethchain2 != null" >
        ethChain2,
      </if>
      <if test="useraddress2 != null" >
        UserAddress2,
      </if>
      <if test="userkeyfilejson2 != null" >
        UserKeyFileJson2,
      </if>
      <if test="money2 != null" >
        money2,
      </if>
      <if test="fc != null" >
        fc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="ethchain1 != null" >
        #{ethchain1,jdbcType=VARCHAR},
      </if>
      <if test="useraddress1 != null" >
        #{useraddress1,jdbcType=VARCHAR},
      </if>
      <if test="userkeyfilejson1 != null" >
        #{userkeyfilejson1,jdbcType=VARCHAR},
      </if>
      <if test="money1 != null" >
        #{money1,jdbcType=VARCHAR},
      </if>
      <if test="ethchain2 != null" >
        #{ethchain2,jdbcType=VARCHAR},
      </if>
      <if test="useraddress2 != null" >
        #{useraddress2,jdbcType=VARCHAR},
      </if>
      <if test="userkeyfilejson2 != null" >
        #{userkeyfilejson2,jdbcType=VARCHAR},
      </if>
      <if test="money2 != null" >
        #{money2,jdbcType=VARCHAR},
      </if>
      <if test="fc != null" >
        #{fc,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.victor.notary.model.InteledgerNotary" >
    update inteledger_notary
    <set >
      <if test="ethchain1 != null" >
        ethChain1 = #{ethchain1,jdbcType=VARCHAR},
      </if>
      <if test="useraddress1 != null" >
        userAddress1 = #{useraddress1,jdbcType=VARCHAR},
      </if>
      <if test="userkeyfilejson1 != null" >
        UserKeyFileJson1 = #{userkeyfilejson1,jdbcType=VARCHAR},
      </if>
      <if test="money1 != null" >
        money1 = #{money1,jdbcType=VARCHAR},
      </if>
      <if test="ethchain2 != null" >
        ethChain2 = #{ethchain2,jdbcType=VARCHAR},
      </if>
      <if test="useraddress2 != null" >
        UserAddress2 = #{useraddress2,jdbcType=VARCHAR},
      </if>
      <if test="userkeyfilejson2 != null" >
        UserKeyFileJson2 = #{userkeyfilejson2,jdbcType=VARCHAR},
      </if>
      <if test="money2 != null" >
        money2 = #{money2,jdbcType=VARCHAR},
      </if>
      <if test="fc != null" >
        fc = #{fc,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.victor.notary.model.InteledgerNotary" >
    update inteledger_notary
    set ethChain1 = #{ethchain1,jdbcType=VARCHAR},
      userAddress1 = #{useraddress1,jdbcType=VARCHAR},
      UserKeyFileJson1 = #{userkeyfilejson1,jdbcType=VARCHAR},
      money1 = #{money1,jdbcType=VARCHAR},
      ethChain2 = #{ethchain2,jdbcType=VARCHAR},
      UserAddress2 = #{useraddress2,jdbcType=VARCHAR},
      UserKeyFileJson2 = #{userkeyfilejson2,jdbcType=VARCHAR},
      money2 = #{money2,jdbcType=VARCHAR},
      fc = #{fc,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--根据交易参与者的fmax选择公证人,只有一个公证人，即只有一步跨链-->
  <select id="selectByFmax" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from inteledger_notary
    where fc &lt;= #{oriFmax,jdbcType=INTEGER} and fc &lt;= #{tarFmax,jdbcType=INTEGER} and userAddress1 &lt;&gt; #{oriUseraddress,jdbcType=VARCHAR}
          and UserAddress2  &lt;&gt; #{tarUseraddress,jdbcType=VARCHAR}
  </select>
</mapper>